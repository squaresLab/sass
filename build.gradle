/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'zack' at '5/9/16 9:59 PM' with Gradle 2.9
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.9/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin:'java'
apply plugin:'eclipse'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    
}


sourceSets {
	main {
		java {
			srcDir 'src' }
//			exclude '**/MultiObjectiveProblem.java'			}
		}
	}
//
// In this section you declare the dependencies for your production and test code
dependencies {

	compile files('libs/junit-4.12-javadoc.jar')
	compile fileTree(dir: 'libs', include: '*.jar')
	//compile fileTree(dir: 'lib', include: ['*.jar'])
	
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.13'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    compile 'junit:junit:4.12'
}

task runParamSweeper(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'ecj.Sweeper'
	
	maxHeapSize='10g'
}

task runCoev(type JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'bullseye.CoevRunner'
	
	maxHeapSize='10g'
}

task runAdaptor(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'ecj.Adaptor'
	
	maxHeapSize='10g'
}

task runRepertoire(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'ecj.RepertoireBuilder'
	
	maxHeapSize='10g'
}

task runJavaGen(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath

        main = 'util.GenJavaFromPlanFiles'

        maxHeapSize='10g'
}

task runMutationStudy(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'ecj.MutationStudy'
	
	maxHeapSize='10g'
}

task runSingleOptimization(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'ec.Evolve'
	
	args '-file','selfadaptivesystemsingleobjective.params'
		args '-file','testParams/configParams.params'

	maxHeapSize='10g'
}

task runMultiOptimization(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath
	
	main = 'ec.Evolve'
	
	args '-file','selfadaptivesystemmultiobjective.params'
		args '-file','testParams/configParams.params'

	maxHeapSize='10g'
}


task checkParameters(type: JavaExec){
	classpath = sourceSets.main.runtimeClasspath

	main='ec.Evolve'
	args '-file','selfadaptivesystemsingleobjective.params'

	maxHeapSize='10g'
}
