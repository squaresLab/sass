# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0 = 				koza.params

# We have two function set, one attacker, one defender
gp.fs.size = 2
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

gp.fs.1 = ec.gp.GPFunctionSet
gp.fs.1.name = f1

# defenders fs
gp.fs.0.size = 7
gp.fs.0.func.0 = bullseye.actions.Randomize
gp.fs.0.func.0.nc = nc1
gp.fs.0.func.1 = bullseye.actions.ChangePasswords
gp.fs.0.func.1.nc = nc0
gp.fs.0.func.2 = bullseye.actions.FlashServers
gp.fs.0.func.2.nc = nc0
gp.fs.0.func.3 = bullseye.actions.Throttle
gp.fs.0.func.3.nc = nc0
gp.fs.0.func.4 = bullseye.actions.Wait
gp.fs.0.func.4.nc = nc0
gp.fs.0.func.5 = bullseye.actions.Probability
gp.fs.0.func.5.nc = nc4
gp.fs.0.func.6 = bullseye.actions.Sequence
gp.fs.0.func.6.nc = nc5

gp.fs.1.size = 12
gp.fs.1.func.0 = bullseye.actions.Randomize
gp.fs.1.func.0.nc = nc1
gp.fs.1.func.1 = bullseye.actions.IfStatement
gp.fs.1.func.1.nc = nc2
gp.fs.1.func.2 = bullseye.actions.ExploitPay
gp.fs.1.func.2.nc = nc0
gp.fs.1.func.3 = bullseye.actions.ExploitPOS
gp.fs.1.func.3.nc = nc0
gp.fs.1.func.4 = bullseye.actions.ExploitWeb
gp.fs.1.func.4.nc = nc0
gp.fs.1.func.5 = bullseye.actions.IsPayCompromised
gp.fs.1.func.5.nc = nc3
gp.fs.1.func.6 = bullseye.actions.IsPOSCompromised
gp.fs.1.func.6.nc = nc3
gp.fs.1.func.7 = bullseye.actions.IsWebCompromised
gp.fs.1.func.7.nc = nc3
gp.fs.1.func.8 = bullseye.actions.PhishEmployee
gp.fs.1.func.8.nc = nc0
gp.fs.1.func.9 = bullseye.actions.PhishVendor
gp.fs.1.func.9.nc = nc0
gp.fs.1.func.10 = bullseye.actions.Probability
gp.fs.1.func.10.nc = nc4
gp.fs.1.func.11 = bullseye.actions.Sequence
gp.fs.1.func.11.nc = nc5

gp.nc.size = 6
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = tactic
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = plan
gp.nc.1.size = 3
gp.nc.1.child.0 = double
gp.nc.1.child.1 = tactic-or-plan
gp.nc.1.child.2 = tactic-or-plan

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc2
gp.nc.2.returns = plan
gp.nc.2.size = 3
gp.nc.2.child.0 = bool
gp.nc.2.child.1 = tactic-or-plan
gp.nc.2.child.2 = tactic-or-plan

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc3
gp.nc.3.returns = bool
gp.nc.3.size = 0

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc4
gp.nc.4.returns = double
gp.nc.4.size = 0

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc5
gp.nc.5.returns = plan
gp.nc.5.size = 2
gp.nc.5.child.0 = tactic-or-plan
gp.nc.5.child.1 = tactic-or-plan

gp.type.a.size = 4
gp.type.a.0.name = tactic
gp.type.a.1.name = plan
gp.type.a.2.name = bool
gp.type.a.3.name = double

gp.type.s.size = 1
gp.type.s.0.name = tactic-or-plan
gp.type.s.0.size = 2
gp.type.s.0.member.0 = plan
gp.type.s.0.member.1 = tactic

gp.tc.size = 2
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = tactic-or-plan

gp.tc.1 = ec.gp.GPTreeConstraints
gp.tc.1.name = tc1
gp.tc.1.fset = f1
gp.tc.1.returns = tactic-or-plan


generations =				1000
quit-on-run-complete =			true
eval =					bullseye.CustMultiPopCoevolutionaryEvaluator

eval.num-current = 5
eval.select-current = ec.select.RandomSelection

eval.num-prev = 5
eval.subpop.0.select-prev = ec.select.TournamentSelection
eval.subpop.1.select-prev = ec.select.TournamentSelection
eval.subpop.0.select.size = 2
eval.subpop.1.select.size = 2

eval.num-gurus = 5

eval.num-shuffled = 1

eval.num-hall = 10
eval.hall-size = 100

pop = 					ec.Population
pop.subpops =				2
pop.subpop.0 = 				ec.Subpopulation
pop.subpop.0.size =			250
pop.subpop.0.duplicate-retries =	2
pop.subpop.0.species =     ec.gp.GPSpecies
pop.subpop.0.species.ind = ec.gp.GPIndividual
pop.subpop.0.species.ind.tree.0.tc = tc0
pop.subpop.0.species.chunk-size =	1
pop.subpop.0.species.pipe = ec.gp.breed.MutateERCPipeline
pop.subpop.0.species.pipe.source.0 = ec.breed.MultiBreedingPipeline
# Koza's decision here was odd...
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.source.0.num-sources = 3
pop.subpop.0.species.pipe.source.0.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.source.0.prob = 0.4
pop.subpop.0.species.pipe.source.0.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.0.source.1.prob = 0.3
pop.subpop.0.species.pipe.source.0.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.0.source.2.prob = 0.3

pop.subpop.0.species.pipe.source.0.source.3.tries = 100

pop.subpop.0.species.pipe.ns.0 = ec.gp.koza.KozaNodeSelector

pop.subpop.0.species.fitness =		ec.simple.SimpleFitness
#pop.subpop.0.species.mutation-prob = 	0.01
#pop.subpop.0.species.crossover-type = 	one
#pop.subpop.0.species.mutation-type =	reset

pop.subpop.1 = 				ec.Subpopulation
pop.subpop.1.size =			250
pop.subpop.1.duplicate-retries =	2
pop.subpop.1.species =     ec.gp.GPSpecies
pop.subpop.1.species.ind = ec.gp.GPIndividual
pop.subpop.1.species.ind.tree.0.tc = tc1
pop.subpop.1.species.ind.numtrees = 1
pop.subpop.1.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.1.species.chunk-size =	1
pop.subpop.1.species.pipe = ec.gp.breed.MutateERCPipeline
pop.subpop.1.species.pipe.source.0 = ec.breed.MultiBreedingPipeline
# Koza's decision here was odd...
pop.subpop.1.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.1.species.pipe.source.0.num-sources = 3
pop.subpop.1.species.pipe.source.0.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.1.species.pipe.source.0.source.0.prob = 0.6
pop.subpop.1.species.pipe.source.0.source.1 = ec.breed.ReproductionPipeline
pop.subpop.1.species.pipe.source.0.source.1.prob = 0.2
pop.subpop.1.species.pipe.source.0.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.1.species.pipe.source.0.source.2.prob = 0.2

pop.subpop.1.species.pipe.source.0.source.3.tries = 100

pop.subpop.1.species.pipe.ns.0 = ec.gp.koza.KozaNodeSelector

pop.subpop.1.species.fitness =		ec.simple.SimpleFitness
#pop.subpop.1.species.mutation-prob = 	0.01
#pop.subpop.1.species.crossover-type = 	one
#pop.subpop.1.species.mutation-type =	reset

stat.file				$out.stat

eval.problem =				ecj.BullseyeProblem
eval.problem.hist-size =		1

# start params added due to errors
#eval.num-elites=1
#eval.num-shuffled=1
#eval.num-prev=0

#eval.select-prev=ec.select.TournamentSelection

#vector.species.max-gene=10
#pop.subpop.0.species.max-gene = 7
#pop.subpop.1.species.max-gene = 10
#vector.species.min-gene=0
# end added params

stat.child.0.hist-size =		1
stat.child.0.file =			compete.stat

stat =					ec.simple.SimpleStatistics
stat.num-children =			0

breed.elite.0 =				5
breed.elite.1 =             5

# for single elimination tournament
#eval.style =				single-elim-tournament

# for round robin
#eval.style =				round-robin

# for random one way tournament
#eval.style =				rand-1-way
#eval.group-size =			10

# for random two way tournament
#eval.style =				rand-2-way
#eval.group-size =			7

gp.koza.xover.maxdepth = 10
gp.koza.mutate.maxdepth = 10
gp.koza.grow.min-depth = 1
gp.koza.grow.max-depth = 10
gp.koza.half.min-depth = 1
gp.koza.half.max-depth = 5

#gp.tc.0.init = ec.gp.koza.HalfBuilder
gp.tc.0.init = ecj.MutationBuilder
gp.tc.0.init.tries = 10
gp.tc.0.init.maxdepth = 5
gp.tc.0.init.build = ec.gp.koza.HalfBuilder

breedthreads = 1
evalthreads = 1

seed.0 = 123456789
seed.1 = 123456788
seed.2 = 123456787
seed.3 = 123456786
seed.4 = 123456785
seed.5 = 123456784
seed.6 = 123456783
seed.7 = 123456782
seed.8 = 123456781
seed.9 = 123456780
seed.10 = 123456779
seed.11 = 123456778
seed.12 = 123456777
seed.13 = 123456776
seed.14 = 123456775
seed.15 = 123456774
seed.16 = 123456773
seed.17 = 123456772
seed.18 = 123456771
seed.19 = 123456770
seed.20 = 123456769
seed.21 = 123456768
seed.22 = 123456767
seed.23 = 123456766
seed.24 = 123456765
seed.25 = 123456764
seed.26 = 123456763
seed.27 = 123456762
seed.28 = 123456761
seed.29 = 123456760

build_prob = 0.9

stat.exploitability-script-path = /home/ckinneer/PycharmProjects/bullseye/exploitability.py

gp.tc.0.init.ns = ec.gp.koza.KozaNodeSelector

gp.tc.0.init.initial_ind = (R ERC[d4581030860394171213|0.0186435554|] (; FlashServers (R ERC[d4602435381355194647|0.4864864865|] ChangePword FlashServers)) (; Throttle (R ERC[d4602204756053502270|0.4736842105|] ChangePword FlashServers)))
gp.tc.1.init.initial_ind = (R ERC[d4599897597917536910|0.3456112063|] (; PhishVendor (I isWebHacked ExploitPay ExploitWeb)) (; ExploitWeb (I isWebHacked PhishVendor (R ERC[d4602800538081373044|0.5135135135|] PhishVendor ExploitWeb))))

gp.tc.1.init = ecj.MutationBuilder
gp.tc.1.init.tries = 10
gp.tc.1.init.maxdepth = 2
gp.tc.1.init.build = ec.gp.koza.HalfBuilder
gp.tc.1.init.ns = ec.gp.koza.KozaNodeSelector
